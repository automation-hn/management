{"version":3,"sources":["components/todoList/Title.js","components/todoList/Control/Search.js","components/todoList/Control/Sort.js","components/todoList/Control/Control.js","components/todoList/Form.js","components/todoList/TaskItem.js","components/todoList/TaskList.js","components/todoList/Control/ConfirmModal.js","TodoList.js","serviceWorker.js","index.js"],"names":["Title","className","Component","Search","props","console","log","state","inputSearch","handleClick","bind","handleClear","handleChange","this","onClickSearch","setState","event","target","value","id","onChange","type","placeholder","onClick","Sort","sortName","sortDir","handleSort","onClickSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","href","role","toLocaleUpperCase","toUpperCase","Control","handleToogle","genetateAddButton","isShowAddForm","button","uuidv4","require","Form","name","level","handleCancel","handleInputChange","handleSubmit","get","isEmpty","nextProps","itemSelected","onAddTask","parseInt","onEditTask","preventDefault","onClickCancel","onSubmit","required","TaskItem","val","index","rowId","scope","generateLevel","onEditItem","openConfirmModal","TaskList","itemEle","items","map","row","item","Object","assign","editItem","key","ConfirmModal","handleDeleteItem","show","deletedItem","Modal","backdrop","animation","onHide","handleCloseModal","size","centered","backdropClassName","Header","closeButton","Body","Footer","Button","variant","TodoList","showModal","handleToogleAddForm","handleSearch","handleAddTask","handleBindingSelectedItem","handleEditTask","handleOpenConfirmModal","deleteItem","_","remove","i","localStorage","setItem","JSON","stringify","task","push","dataFromLocalStorage","parse","getItem","addForm","length","filter","includes","toLower","orderBy","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14334a0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Title extends Component {\n    render() {\n        return (\n            <div className=\"page-header\">\n                <h2>Daily tasks</h2>\n            </div>\n        );\n    }\n}\n\nexport default Title;","import React, { Component } from 'react';\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n\n        console.log('constructor');\n\n        this.state = {\n            inputSearch: ''\n        };\n\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    } \n\n    handleClick() {\n        this.props.onClickSearch(this.state.inputSearch);\n    }\n\n    handleClear() {\n        this.setState({ inputSearch: '' });\n        this.props.onClickSearch('');\n    }\n\n    handleChange(event) {\n        this.setState({ inputSearch: event.target.value });\n    }\n\n    render() {\n        return (\n            <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n              <div className=\"input-group\">\n                <input id=\"txtSearch\" value={this.state.inputSearch} onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"...\" />\n                <div className=\"input-group-btn\">\n                  <button id=\"btnSearch\" onClick={this.handleClick} className=\"btn btn-success\" type=\"button\">Search</button>\n                  <button id=\"btnClear\" onClick={this.handleClear} className=\"btn btn-warning\" type=\"button\">Clear</button>\n                </div>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default Search;","import React, { Component } from 'react';\n\nclass Sort extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortName: 'level',\n            sortDir: 'desc'\n        };\n        this.handleSort = this.handleSort.bind(this);\n    } \n\n    handleSort(sortName, sortDir){\n        this.setState({\n            sortName, sortDir\n        });\n        this.props.onClickSort(sortName, sortDir);\n    }\n\n    render() {\n        const { sortName, sortDir } = this.state;\n        return (\n          <div className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3\">\n            <div className=\"dropdown\">\n              <button className=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                Sort by <span className=\"caret\" />\n              </button>\n              <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                <li><a href='/#' role=\"button\" onClick={() => this.handleSort('name', 'asc')}>Name Asc</a></li>\n                <li><a href='/#' role=\"button\" onClick={() => this.handleSort('name', 'desc')}>Name Desc</a></li>\n                <hr/>\n                <li><a href='/#' role=\"button\" onClick={() => this.handleSort('level', 'asc')}>Level Asc</a></li>\n                <li><a href='/#' role=\"button\" onClick={() => this.handleSort('level', 'desc')}>Level Desc</a></li>\n              </ul>\n              <span> </span>\n              <span id=\"spSort\" className=\"label label-success label-medium\">{`${sortName.toLocaleUpperCase()} - ${sortDir.toUpperCase()}` }</span>\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default Sort;","import React, { Component } from 'react';\nimport Search from './Search'\nimport Sort from './Sort'\n\nclass Control extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleToogle = this.handleToogle.bind(this);\n        this.genetateAddButton = this.genetateAddButton.bind(this);\n    }\n\n    handleToogle() {\n        this.props.onClick();\n    }\n\n    genetateAddButton() {\n        if (this.props.isShowAddForm) {\n            return (<button type=\"button\" className=\"btn btn-default btn-block\" onClick={this.handleToogle}>Cancel</button>);\n        }\n        return (<button id=\"btnAddNewTask\" type=\"button\" className=\"btn btn-info btn-block\" onClick={this.handleToogle}>Add new task</button>);\t\n    }\n\n    render() {\n        let button = this.genetateAddButton();\n        return (\n            <div className=\"row\">\n              <Search onClickSearch={this.props.onClickSearch} />\n                {/* SORT AREA */}\t\n              <Sort onClickSort={this.props.onClickSort} />\n                {/* ADD NEW TASK BUTTON */}\n                <div className=\"col-xs-5 col-sm-5 col-md-5 col-lg-5\">\t\t\n                    { button }\t\n                    {/* {this.showControllButton} */}\n                    {/* <button type=\"button\" className=\"btn btn-info btn-block\" onClick={this.props.onClick}>Add new task</button>\t\t\t\t */}\n                </div>\n              </div>\n        );\n    }\n}\n\nexport default Control;","import React, { Component } from 'react';\nimport { get, isEmpty, parseInt } from 'lodash';\nconst uuidv4 = require('uuid/v4')\n\nclass Form extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            name: '',\n            level: 0\n        };\n\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentWillMount() {\n        const id = get(this.props, 'itemSelected.id', '');\n        if (!isEmpty(id)) {\n            const { name, level } = get(this.props, 'itemSelected', {});\n            this.setState({\n                id, name, level\n            });\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps !== null) {\n            const { itemSelected: { id, name, level } } = nextProps;\n            this.setState({\n                id, name, level\n            });\n        }\n    }\n\n    handleSubmit(event) {\n        const { id, name, level } = this.state;\n        if (isEmpty(id)) {\n            this.props.onAddTask({name, level: parseInt(level), id: uuidv4()});\n        } else {\n            this.props.onEditTask({name, level: parseInt(level), id});\n        }\n        event.preventDefault();\n    }\n\n    handleCancel() {\n        this.setState({\n            id: '',\n            name: '',\n            level: 0\n        });\n        this.props.onClickCancel();\n    }\n\n    handleInputChange(event) {\n        const { target: { name, value } } = event;\n        // const value = target.name === 'isGoing' ? target.checked : target.value;\n    \n        this.setState({\n          [name]: value\n        });\n    }\n\n    render() {\n        const { name, level } = this.state;\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-offset-7 col-md-5\">\t\t\t\t\t\n                  <form  onSubmit={this.handleSubmit} className=\"form-inline\">\n                    <div className=\"form-group\">\n                      {/* <label className=\"sr-only\" htmlFor>label</label> */}\n                      <input id=\"txtTaskName\" name=\"name\" type=\"text\" className=\"form-control\" placeholder=\"Task name\" value={name} onChange={this.handleInputChange} />\n                    </div>\n                    <div className=\"form-group\">\n                        <select  placeholder=\"Task priority\" name=\"level\" value={parseInt(level)} id=\"input\" className=\"form-control\" required=\"required\" onChange={this.handleInputChange}>\n                            <option value={0}>Low</option>\n                            <option value={1}>Medium</option>\n                            <option value={2}>High</option>\n                        </select>\n                      {/* <select name=\"level\" id=\"input\" className=\"form-control\" required=\"required\" onChange={this.handleInputChange}>\n                        <option selected={parseInt(displayLevel) === 0 } value={0}>Low</option>\n                        <option selected={parseInt(displayLevel) === 1 } value={1}>Medium</option>\n                        <option selected={parseInt(displayLevel) === 2 } value={2}>High</option>\n                      </select> */}\n                    </div>\n                    <button id=\"btnSubmitTask\" type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                    <button onClick={this.handleCancel} type=\"button\" className=\"btn btn-danger\">Cancel</button>\n                  </form>\n                </div>\n              </div>\n        );\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\n\nclass TaskItem extends Component {\n\n    generateLevel(level){\n        if ((level) === 0) {\n            return (<span className=\"label label-info\">Low</span>);\n        } else if (level === 1) {\n            return (<span className=\"label label-default\">Medium</span>);\n        } else {\n            return (<span className=\"label label-danger\">High</span>);\n        }\n    }\n\n    render() {\n        const { val: { index, name, level, id } } = this.props;\n        const rowId = `tr_${id}`;\n        return (\n            <tr id={rowId}>\n                <th scope=\"row\">{index + 1}</th>    \n                <td>{name}</td>\n                <td>{this.generateLevel(level)}</td>\n                <td>\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={() => this.props.onEditItem({id, name, level})}>Edit</button>\n                    <span> </span>\n                    <button type=\"button\" className=\"btn btn-success\" onClick={() => this.props.openConfirmModal({id, name})}>Mark as done</button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default TaskItem;","import React, { Component } from 'react';\nimport TaskRow from './TaskItem';\n\nclass TaskList extends Component {\n\n    render() {\n        const itemEle = this.props.items.map((row, index) => {\n            let item = Object.assign({},{ ...row, index });\n            return <TaskRow onEditItem={this.props.editItem} openConfirmModal={this.props.openConfirmModal} key={index} val={item} />\n        });\n\n        return (\n            <div className=\"panel panel-success\">\n                <div className=\"panel-heading\">List task</div>\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Task</th>\n                            <th scope=\"col\">Priority</th>\n                            <th scope=\"col\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {itemEle}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default TaskList;","import React, { Component } from 'react';\nimport { Button, Modal } from 'react-bootstrap'\n\nclass ConfirmModal extends Component {\n\n  confirm(id) {\n    this.props.handleDeleteItem(id);\n  }\n\n  render() {\n    const { show, deletedItem: { name, id } } = this.props;\n    return (\n      <Modal\n        backdrop='static'\n        show={show}\n        animation={false}\n        onHide={this.props.handleCloseModal}\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdropClassName='modalCustom'\n        >\n        <Modal.Header closeButton={this.props.handleCloseModal}>\n            <Modal.Title>Confirm</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Mark <b>{ name }</b> as done?\n        </Modal.Body>\n        <Modal.Footer>\n            <Button variant='outline-info' onClick={this.props.handleCloseModal}>Cancel</Button>\n            <Button variant='success' onClick={() => this.props.handleDeleteItem(id)}>OK</Button>\n        </Modal.Footer>\n    </Modal>\n    );\n  }\n}\n\nexport default ConfirmModal;","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport Title from './components/todoList/Title'\nimport Control from './components/todoList/Control/Control'\nimport Form from './components/todoList/Form'\nimport TaskList from './components/todoList/TaskList'\nimport ConfirmModal from './components/todoList/Control/ConfirmModal'\n// import mockItems from './mockData/tasks'\n\nclass TodoList extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            items: [],\n            inputSearch: '',\n            isShowAddForm: false,\n            sortName: 'level',\n            sortDir: 'desc',\n            itemSelected: null,\n            showModal: false,\n            deletedItem: null\n        };\n\n        this.handleToogleAddForm = this.handleToogleAddForm.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n        this.handleDeleteItem = this.handleDeleteItem.bind(this);\n        this.handleAddTask = this.handleAddTask.bind(this);\n        this.handleBindingSelectedItem = this.handleBindingSelectedItem.bind(this);\n        this.handleEditTask = this.handleEditTask.bind(this);\n        this.handleOpenConfirmModal = this.handleOpenConfirmModal.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n    }\n\n    handleToogleAddForm() {\n        this.setState({\n            itemSelected: null,\n            isShowAddForm: !this.state.isShowAddForm\n        });\n    }\n\n    handleSearch(inputSearch) {\n        this.setState({ inputSearch });\n    }\n\n    handleSort(sortName, sortDir) {\n        this.setState({ sortName, sortDir });\n    }\n\n    handleOpenConfirmModal(deletedItem) {\n        this.setState({ showModal: true, deletedItem })\n    }\n\n    handleCloseModal() {\n        this.setState({ showModal: false })\n    }\n\n    deleteItem(id) {\n        let { items } = this.state;\n        _.remove(items, i => i.id === id);\n        this.setState({ items, deleteItem: null });\n\n        localStorage.setItem('items', JSON.stringify(items));\n    }\n\n    handleDeleteItem(id) {\n        this.deleteItem(id);\n        this.handleCloseModal();\n    }\n\n\n    handleAddTask(task) {\n        let { items } = this.state;\n        items.push(task);\n        this.setState({ items, isShowAddForm: false });\n\n        localStorage.setItem('items', JSON.stringify(items));\n    }\n\n    handleEditTask(task) {\n        let { items } = this.state;\n        _.remove(items, i => i.id === task.id);\n        items.push(task);\n        this.setState({ items, isShowAddForm: false });\n\n        localStorage.setItem('items', JSON.stringify(items));\n    }\n\n    handleBindingSelectedItem(itemSelected) {\n        this.setState({ itemSelected, isShowAddForm: true });\n    }\n\n    componentWillMount() {\n        const dataFromLocalStorage = JSON.parse(localStorage.getItem('items'));\n        this.setState({ items: dataFromLocalStorage ?? [] });\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        let addForm = null;\n\n        let { isShowAddForm, items, sortDir, sortName, inputSearch, itemSelected, showModal, deletedItem } = this.state;\n        if (isShowAddForm) {\n            addForm = <Form itemSelected={itemSelected} onAddTask={this.handleAddTask} onEditTask={this.handleEditTask} onClickCancel={this.handleToogleAddForm} />;\n        }\n\n        items = inputSearch.length > 0 ? items.filter(i => _.includes(_.toLower(i.name), _.toLower(inputSearch))) : items;\n        items = _.orderBy(items,[sortName],[sortDir]);\n\n        return (\n            <div>\n                <Title />\n                <Control\n                    onClick = {this.handleToogleAddForm}\n                    isShowAddForm = {isShowAddForm}\n                    onClickSearch = {this.handleSearch}\n                    onClickSort = {this.handleSort}\n                />\n                { addForm }\n                <TaskList editItem={this.handleBindingSelectedItem} openConfirmModal={this.handleOpenConfirmModal} items={items}/>\n                <ConfirmModal show={showModal} deletedItem={deletedItem ?? {}} handleCloseModal={this.handleCloseModal} handleDeleteItem={this.handleDeleteItem} />\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Introduce from './Introduce';\nimport TodoList from './TodoList';\n// import ModalExample from './ModalExample';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <TodoList />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}